#!/usr/bin/env python3
import sys
import time
import json
import Config
import smtplib
import logging
import requests
import email.utils
import os
import random
from datetime import datetime
from email.message import EmailMessage
from logging.handlers import RotatingFileHandler
import subprocess

RESTART_FLAG = "bot_restarted.flag"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª –ò –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è RailWay
file_handler = RotatingFileHandler("vinted_scanner.log", maxBytes=5000000, backupCount=5)
console_handler = logging.StreamHandler(sys.stdout)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–±–æ–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
formatter = logging.Formatter("%(asctime)s - %(filename)s - %(funcName)10s():%(lineno)s - %(levelname)s - %(message)s")
file_handler.setFormatter(formatter)
console_handler.setFormatter(formatter)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(handlers=[file_handler, console_handler],
                    format="%(asctime)s - %(filename)s - %(funcName)10s():%(lineno)s - %(levelname)s - %(message)s",
                    level=logging.INFO)

timeoutconnection = 30
list_analyzed_items = []

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö User-Agent –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
user_agents = [
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:128.0) Gecko/20100101 Firefox/128.0",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
]

def get_random_headers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ headers –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
    return {
        "User-Agent": random.choice(user_agents),
        "Accept": "application/json, text/plain, */*",
        "Accept-Language": "en-US,en;q=0.9,de;q=0.8",
        "DNT": "1",
        "Connection": "keep-alive",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "same-origin",
        "Sec-GPC": "1",
        "Pragma": "no-cache",
        "Cache-Control": "no-cache",
        "Referer": f"{Config.vinted_url}/",
    }

def random_delay(min_seconds=0.5, max_seconds=2):
    """–ë—ã—Å—Ç—Ä–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    delay = random.uniform(min_seconds, max_seconds)
    logging.info(f"Quick delay: {delay:.1f}s")
    time.sleep(delay)

async def notify_ban_status(ban_duration, consecutive_errors, is_recovering=False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–∞–Ω–µ –≤ Telegram —á–∞—Ç"""
    try:
        if is_recovering:
            status_text = f"üîÑ **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏**\n\n"
            status_text += f"‚Ä¢ –í–æ–∑–æ–±–Ω–æ–≤–ª—è—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            status_text += f"‚Ä¢ –ü—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—à–∏–±–æ–∫: {consecutive_errors}\n"
            status_text += f"‚Ä¢ –í—Ä–µ–º—è –ø–∞—É–∑—ã –±—ã–ª–æ: {ban_duration}—Å"
        else:
            status_text = f"üö´ **IP –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù VINTED**\n\n"
            status_text += f"‚Ä¢ Consecutive 403 errors: {consecutive_errors}\n"
            status_text += f"‚Ä¢ –ü–∞—É–∑–∞ –Ω–∞: {ban_duration} —Å–µ–∫—É–Ω–¥\n"
            status_text += f"‚Ä¢ –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {ban_duration}—Å\n"
            status_text += f"‚Ä¢ –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {datetime.now().strftime('%H:%M:%S')}"
        
        import requests
        url = f"https://api.telegram.org/bot{Config.telegram_bot_token}/sendMessage"
        requests.post(url, data={
            "chat_id": Config.telegram_chat_id,
            "text": status_text,
            "parse_mode": "Markdown"
        }, timeout=10)
        
        logging.info(f"Ban status notification sent: {'recovering' if is_recovering else 'blocked'}")
    except Exception as e:
        logging.error(f"Failed to send ban notification: {e}")

def adaptive_ban_recovery(consecutive_errors):
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –±–∞–Ω–æ–≤"""
    if consecutive_errors <= 2:
        return 15  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ª–µ–≥–∫–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    elif consecutive_errors <= 5:
        return 45  # –°—Ä–µ–¥–Ω—è—è –ø–∞—É–∑–∞
    elif consecutive_errors <= 10:
        return 120  # –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞
    else:
        return 300  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫

headers = get_random_headers()

def load_analyzed_item():
    list_analyzed_items.clear()
    try:
        with open("vinted_items.txt", "r", errors="ignore") as f:
            for line in f:
                if line:
                    list_analyzed_items.append(line.rstrip())
    except IOError as e:
        logging.error(e, exc_info=True)
        sys.exit()

def save_analyzed_item(hash):
    try:
        with open("vinted_items.txt", "a") as f:
            f.write(str(hash) + "\n")
    except IOError as e:
        logging.error(e, exc_info=True)
        sys.exit()

def send_email(item_title, item_price, item_url, item_image, item_size=""):
    try:
        msg = EmailMessage()
        msg["To"] = Config.smtp_toaddrs
        msg["From"] = email.utils.formataddr(("Vinted Scanner", Config.smtp_username))
        msg["Subject"] = "Vinted Scanner - New Item"
        msg["Date"] = email.utils.formatdate(localtime=True)
        msg["Message-ID"] = email.utils.make_msgid()
        body = f"{item_title}\n{item_price}"
        if item_size:
            body += f", SIZE: {item_size}"
        body += f"\nüîó {item_url}\nüì∑ {item_image}"
        msg.set_content(body)
        with smtplib.SMTP(Config.smtp_server, 587) as smtpserver:
            smtpserver.ehlo()
            smtpserver.starttls()
            smtpserver.ehlo()
            smtpserver.login(Config.smtp_username, Config.smtp_psw)
            smtpserver.send_message(msg)
            logging.info("E-mail sent")
    except smtplib.SMTPException as e:
        logging.error(f"SMTP error sending email: {e}", exc_info=True)
    except Exception as e:
        logging.error(f"Error sending email: {e}", exc_info=True)

def send_slack_message(item_title, item_price, item_url, item_image, item_size=""):
    webhook_url = Config.slack_webhook_url 
    message = f"*{item_title}*\nüè∑Ô∏è {item_price}"
    if item_size:
        message += f", SIZE: {item_size}"
    message += f"\nüîó {item_url}\nüì∑ {item_image}"
    slack_data = {"text": message}
    try:
        response = requests.post(
            webhook_url, 
            data=json.dumps(slack_data),
            headers={"Content-Type": "application/json"},
            timeout=timeoutconnection
        )
        if response.status_code != 200:
            logging.error(f"Slack notification failed: {response.status_code}, {response.text}")
        else:
            logging.info("Slack notification sent")
    except requests.exceptions.RequestException as e:
        logging.error(f"Error sending Slack message: {e}")

def send_telegram_topic_message(item, thread_id, max_retries=5):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç–æ–≤–∞—Ä–µ –≤ Telegram —Ç–æ–ø–∏–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback –≤ –æ–±—â–∏–π —á–∞—Ç
    
    Args:
        item: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞ (title, price, url, image, size)
        thread_id: ID —Ç–æ–ø–∏–∫–∞ –≤ Telegram
        max_retries: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    caption = f"<b>{item['title']}</b>\nüè∑Ô∏è {item['price']}"
    if item.get("size"):
        caption += f", SIZE: {item['size']}"
    caption += f"\nüîó {item['url']}"
    
    url = f"https://api.telegram.org/bot{Config.telegram_bot_token}/sendPhoto"
    params = {
        "chat_id": Config.telegram_chat_id,
        "photo": item["image"],
        "caption": caption,
        "parse_mode": "HTML",
        "message_thread_id": thread_id
    }
    
    for attempt in range(max_retries):
        response = requests.post(url, data=params)
        if response.status_code == 200:
            logging.info(f"Telegram topic notification sent to thread {thread_id}")
            return True
        elif response.status_code == 400:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ "thread not found"
            try:
                error_data = response.json()
                if "message thread not found" in error_data.get("description", "").lower():
                    logging.warning(f"Thread {thread_id} not found, sending to main chat")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç –±–µ–∑ thread_id
                    params_main = params.copy()
                    del params_main["message_thread_id"]
                    params_main["caption"] = caption
                    
                    response_main = requests.post(url, data=params_main)
                    if response_main.status_code == 200:
                        logging.info(f"Message sent to main chat instead of thread {thread_id}")
                        return True
                    else:
                        logging.error(f"Failed to send to main chat: {response_main.status_code}, {response_main.text}")
                        break
                else:
                    logging.error(f"Telegram API error: {response.status_code}, {response.text}")
                    break
            except Exception as e:
                logging.error(f"Error parsing response: {e}")
                break
        elif response.status_code == 429:
            try:
                retry_after = response.json().get("parameters", {}).get("retry_after", 30)
            except Exception:
                retry_after = 30
            warn_text = f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Telegram API –æ—Ç–ø—Ä–∞–≤–∏–ª Too Many Requests! –ë–æ—Ç –Ω–∞ –ø–∞—É–∑–µ {retry_after} —Å–µ–∫.\n" \
                        f"–°—Ç—Ä–æ–∫–∞ –∏–∑ –ª–æ–≥–∞:\n429 Too Many Requests. Waiting {retry_after} seconds before retry..."
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Ç
            try:
                requests.post(
                    f"https://api.telegram.org/bot{Config.telegram_bot_token}/sendMessage",
                    data={
                        "chat_id": Config.telegram_chat_id,
                        "text": warn_text
                    }
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ —á–∞—Ç: {e}")
            logging.warning(f"429 Too Many Requests. Waiting {retry_after} seconds before retry...")
            time.sleep(retry_after)
        else:
            logging.error(f"Telegram topic notification failed: {response.status_code}, {response.text}")
            break
        time.sleep(1)
    return False

def handle_restart_flag():
    if os.path.exists(RESTART_FLAG):
        logging.info("=== VintedScanner script was restarted by Telegram command ===")
        os.remove(RESTART_FLAG)
        # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—â–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞!

def scan_all_topics():
    load_analyzed_item()
    session = requests.Session()
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ headers
        init_headers = get_random_headers()
        session.get(Config.vinted_url, headers=init_headers, timeout=timeoutconnection)
        random_delay(0.5, 1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    except Exception as e:
        logging.error(f"Error initializing session: {e}")
    
    cookies = session.cookies.get_dict()
    consecutive_403_errors = 0
    max_403_errors = 3
    last_ban_notification = 0

    for topic_name, topic_info in Config.topics.items():
        try:
            logging.info(f"üîç Scanning topic: {topic_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 403 –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥
            if consecutive_403_errors >= max_403_errors:
                ban_duration = adaptive_ban_recovery(consecutive_403_errors)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–∞–Ω–µ (–Ω–µ —á–∞—â–µ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É)
                current_time = time.time()
                if current_time - last_ban_notification > 60:
                    try:
                        import asyncio
                        asyncio.run(notify_ban_status(ban_duration, consecutive_403_errors, False))
                        last_ban_notification = current_time
                    except Exception as e:
                        logging.error(f"Failed to notify ban: {e}")
                
                logging.warning(f"üö´ IP blocked! Taking {ban_duration}s break (errors: {consecutive_403_errors})")
                time.sleep(ban_duration)
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
                try:
                    import asyncio
                    asyncio.run(notify_ban_status(ban_duration, consecutive_403_errors, True))
                except Exception as e:
                    logging.error(f"Failed to notify recovery: {e}")
                
                consecutive_403_errors = 0
                logging.info(f"üîÑ Resuming scanning after {ban_duration}s break")
            
            # –ë—ã—Å—Ç—Ä–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–æ–ø–∏–∫–∞–º–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            random_delay(0.5, 1.5)
            
            params = topic_info["query"].copy()
            # —Ñ–∏–ª—å—Ç—Ä—É–µ–º catalog_ids
            catalog_ids = params.get("catalog_ids", "")
            exclude_ids = topic_info.get("exclude_catalog_ids", "")
            if catalog_ids:
                ids = [x.strip() for x in catalog_ids.split(",") if x.strip()]
                exclude = [x.strip() for x in exclude_ids.split(",") if x.strip()]
                filtered = [x for x in ids if x not in exclude]
                params["catalog_ids"] = ",".join(filtered)
            thread_id = topic_info["thread_id"]
            data = None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–µ–∂–∏–µ headers –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            request_headers = get_random_headers()
            response = requests.get(f"{Config.vinted_url}/api/v2/catalog/items", 
                                  params=params, 
                                  cookies=cookies, 
                                  headers=request_headers, 
                                  timeout=timeoutconnection)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if response.status_code == 403:
                consecutive_403_errors += 1
                logging.warning(f"‚ö†Ô∏è 403 Forbidden #{consecutive_403_errors} - IP rate limited")
                continue
            elif response.status_code != 200:
                consecutive_403_errors = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö
                logging.error(f"‚ùå Bad response status: {response.status_code}")
                continue
            else:
                # –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                if consecutive_403_errors > 0:
                    logging.info(f"‚úÖ Request successful after {consecutive_403_errors} errors - recovery complete")
                consecutive_403_errors = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º content-type
            content_type = response.headers.get('content-type', '')
            if 'application/json' not in content_type:
                logging.error(f"Non-JSON response received\nContent-Type: {content_type}\nStatus: {response.status_code}\nParams: {params}\nResponse: {response.text[:500]}")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            if not response.text.strip():
                logging.error(f"Empty response received\nStatus: {response.status_code}\nParams: {params}")
                continue
            
            # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON
            try:
                data = response.json()
            except Exception as json_error:
                logging.error(f"JSONDecodeError: {json_error}\nStatus code: {response.status_code}\nContent-Type: {content_type}\nRequest params: {params}\nResponse text: {response.text[:500]}", exc_info=True)
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ data –ø–æ–ª—É—á–µ–Ω –∏ –≤–∞–ª–∏–¥–µ–Ω
            if not data:
                logging.error(f"No data received for params: {params}")
                continue
                
            if not isinstance(data, dict):
                logging.error(f"Invalid data format (not dict): {type(data)}\nParams: {params}")
                continue
                
            if "items" not in data:
                logging.error(f"No 'items' field in response\nData keys: {list(data.keys()) if isinstance(data, dict) else 'N/A'}\nParams: {params}")
                continue

            if data and "items" in data:
                exclude_ids = topic_info.get("exclude_catalog_ids", "")
                exclude_set = set(str(x.strip()) for x in exclude_ids.split(",") if x.strip())
                for item in data["items"]:
                    catalog_id = item.get("catalog_id", "")
                    if catalog_id != "":
                        if str(catalog_id) in exclude_set:
                            continue
                    item_id = str(item["id"])
                    item_title = item["title"]
                    item_url = item["url"]
                    item_price = f'{item["price"]["amount"]} {item["price"]["currency_code"]}'
                    item_image = item["photo"]["full_size_url"]
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
                    item_size = ""
                    if "size_title" in item and item["size_title"]:
                        item_size = item["size_title"]
                    elif "size" in item and item["size"]:
                        item_size = item["size"]
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –≤–µ—â–∏
                    if item_id not in list_analyzed_items:
                        if Config.smtp_username and Config.smtp_server:
                            send_email(item_title, item_price, item_url, item_image, item_size)
                            time.sleep(1)
                        if Config.slack_webhook_url:
                            send_slack_message(item_title, item_price, item_url, item_image, item_size)
                            time.sleep(1)
                        if Config.telegram_bot_token and Config.telegram_chat_id:
                            send_telegram_topic_message({
                                "image": item_image,
                                "title": item_title,
                                "price": item_price,
                                "url": item_url,
                                "size": item_size
                            }, thread_id)
                            time.sleep(1)
                        list_analyzed_items.append(item_id)
                        save_analyzed_item(item_id)
        
        except requests.exceptions.Timeout:
            logging.error(f"Request timeout for topic '{topic_name}' with params: {params}")
        except requests.exceptions.RequestException as e:
            logging.error(f"Request error for topic '{topic_name}': {e}\nParams: {params}", exc_info=True)
        except Exception as topic_error:
            logging.error(f"Error processing topic '{topic_name}': {topic_error}", exc_info=True)

def main():
    handle_restart_flag()
    try:
        scan_all_topics()
    except Exception as e:
        logging.error(f"Error in scan_all_topics: {e}", exc_info=True)

if __name__ == "__main__":
    subprocess.Popen(["python3", "telegram_bot.py"])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    try:
        import requests
        url = f"https://api.telegram.org/bot{Config.telegram_bot_token}/sendMessage"
        requests.post(url, data={
            "chat_id": Config.telegram_chat_id,
            "text": f"üöÄ **VintedScanner –∑–∞–ø—É—â–µ–Ω!**\n\n‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 5-10 —Å–µ–∫—É–Ω–¥\nüõ°Ô∏è –ê–≤—Ç–æ-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –±–∞–Ω–æ–≤\nüìä 19 —Ç–æ–ø–∏–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ\n\nüïê –ó–∞–ø—É—Å–∫: {datetime.now().strftime('%H:%M:%S')}",
            "parse_mode": "Markdown"
        }, timeout=10)
    except:
        pass
    
    while True:
        try:
            main()
        except KeyboardInterrupt:
            logging.info("Scanner stopped by user")
            break
        except Exception as e:
            logging.error(f"Unexpected error in main loop: {e}", exc_info=True)
        
        # –ë–´–°–¢–†–´–ô —Ä–µ–∂–∏–º: 5-10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –¥–ª—è 60 –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ —á–∞—Å
        quick_delay = random.randint(5, 10)
        logging.info(f"‚ö° Next scan in {quick_delay}s (Quick mode: 60 checks/hour)")
        time.sleep(quick_delay)
