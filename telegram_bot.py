import sys
import os
import logging
from telegram.ext import Application, CommandHandler
import Config
import json
import time
import asyncio

async def safe_send_document(update, context, file_path):
    for attempt in range(3):
        try:
            await update.message.reply_document(document=open(file_path, "rb"))
            return
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            await asyncio.sleep(2)  # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

RESTART_FLAG = "bot_restarted.flag"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —É–¥–∞–ª–µ–Ω—ã (delete_old –∫–æ–º–∞–Ω–¥–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞)

async def restart(update, context):
    await update.message.reply_text("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...")
    # –û—á–∏—â–∞–µ–º vinted_items.txt —Ç–æ–ª—å–∫–æ –ø—Ä–∏ /restart
    with open("vinted_items.txt", "w") as f:
        f.write("")
    # –§–ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    with open(RESTART_FLAG, "w") as f:
        f.write("1")
    os.execv(sys.executable, [sys.executable] + sys.argv)

async def safe_log(update, context):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–∞ –±–µ–∑ HTML –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    log_file = "vinted_scanner.log"
    if os.path.exists(log_file):
        try:
            with open(log_file, "r", encoding="utf-8", errors="ignore") as f:
                lines = f.readlines()
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
                last_lines = lines[-10:] if len(lines) >= 10 else lines
                log_text = "".join(last_lines)
                if log_text.strip():
                    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                    safe_text = ""
                    for char in log_text:
                        if ord(char) < 128 and char.isprintable() or char in '\n\r\t':
                            safe_text += char
                        else:
                            safe_text += '?'
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                    if len(safe_text) > 3500:
                        safe_text = "..." + safe_text[-3400:]
                    
                    await update.message.reply_text(f"üìã –õ–æ–≥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏):\n\n{safe_text}")
                else:
                    await update.message.reply_text("üìã –§–∞–π–ª –ª–æ–≥–æ–≤ –ø—É—Å—Ç.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:200]}")
    else:
        await update.message.reply_text("‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def status(update, context):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        log_exists = "‚úÖ" if os.path.exists("vinted_scanner.log") else "‚ùå"
        items_exists = "‚úÖ" if os.path.exists("vinted_items.txt") else "‚ùå"
        config_exists = "‚úÖ" if os.path.exists("Config.py") else "‚ùå"
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        items_count = 0
        if os.path.exists("vinted_items.txt"):
            try:
                with open("vinted_items.txt", "r") as f:
                    items_count = len(f.readlines())
            except:
                items_count = "?"
        
        status_text = f"""ü§ñ **VintedScanner Status**

üìÅ **–§–∞–π–ª—ã:**
‚Ä¢ –õ–æ–≥: {log_exists}
‚Ä¢ –ë–∞–∑–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {items_exists} 
‚Ä¢ –ö–æ–Ω—Ñ–∏–≥: {config_exists}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {items_count}

‚ö° **–°—Ç–∞—Ç—É—Å:** –ü–∞—à–µ—Ç –ø–∏–∑–¥–∞—Ç–æ!"""
        
        await update.message.reply_text(status_text, parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"–ü–∞—à–µ—Ç –ø–∏–∑–¥–∞—Ç–æ! (—Å—Ç–∞—Ç—É—Å: {e})")

async def threadid(update, context):
    await update.message.reply_text(f"thread_id: {update.message.message_thread_id}")

async def send_log(update, context):
    log_file = "vinted_scanner.log"
    if os.path.exists(log_file):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(log_file)
            if file_size > 50 * 1024 * 1024:  # 50MB –ª–∏–º–∏—Ç Telegram
                await update.message.reply_text("‚ùå –§–∞–π–ª –ª–æ–≥–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>50MB). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /log –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫.")
                return
            
            with open(log_file, "rb") as f:
                await update.message.reply_document(
                    document=f,
                    filename="vinted_scanner.log",
                    caption="üìÑ –ü–æ–ª–Ω—ã–π —Ñ–∞–π–ª –ª–æ–≥–∞ VintedScanner"
                )
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
            try:
                with open(log_file, "r", encoding="utf-8", errors="ignore") as f:
                    content = f.read()
                    if len(content) > 4000:
                        content = "...–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã...\n" + content[-3500:]
                    await update.message.reply_text(f"–õ–æ–≥ –∫–∞–∫ —Ç–µ–∫—Å—Ç:\n```\n{content}\n```", parse_mode="Markdown")
            except Exception as e2:
                await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥: {e2}")
    else:
        await update.message.reply_text("‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def log(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ vinted_scanner.log"""
    log_file = "vinted_scanner.log"
    if os.path.exists(log_file):
        try:
            with open(log_file, "r", encoding="utf-8", errors="ignore") as f:
                lines = f.readlines()
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
                last_lines = lines[-10:] if len(lines) >= 10 else lines
                log_text = "".join(last_lines)
                if log_text.strip():
                    # –û—á–∏—â–∞–µ–º –æ—Ç HTML —Ç–µ–≥–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    import re
                    log_text = re.sub(r'<[^>]+>', '', log_text)  # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
                    log_text = log_text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
                    
                    # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–ª–∏–º–∏—Ç Telegram ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
                    if len(log_text) > 3500:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è —Ç–µ–≥–æ–≤
                        log_text = "..." + log_text[-3400:]
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ HTML –ø–∞—Ä—Å–∏–Ω–≥–∞
                    await update.message.reply_text(f"üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞:**\n\n```\n{log_text}\n```", parse_mode="Markdown")
                else:
                    await update.message.reply_text("üìã –§–∞–π–ª –ª–æ–≥–æ–≤ –ø—É—Å—Ç.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            try:
                with open(log_file, "r", encoding="utf-8", errors="ignore") as f:
                    lines = f.readlines()
                    last_lines = lines[-5:] if len(lines) >= 5 else lines  # –ë–µ—Ä–µ–º –º–µ–Ω—å—à–µ —Å—Ç—Ä–æ–∫
                    log_text = "".join(last_lines)
                    if log_text.strip():
                        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                        safe_text = ''.join(char for char in log_text if ord(char) < 128)
                        await update.message.reply_text(f"–õ–æ–≥ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π):\n{safe_text}")
            except Exception as e2:
                await update.message.reply_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e2}")
    else:
        await update.message.reply_text("‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def notify_start(application):
    await application.bot.send_message(chat_id=Config.telegram_chat_id, text="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –≤–µ—â–∏ –∏–∑ last_items.json –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ!
    if os.path.exists(RESTART_FLAG):
        await application.bot.send_message(chat_id=Config.telegram_chat_id, text="–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
        logging.info("=== VintedScanner script was restarted by Telegram command ===")
        os.remove(RESTART_FLAG)

async def help_command(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"""
    help_text = """ü§ñ **VintedScanner Bot - –ö–æ–º–∞–Ω–¥—ã**

üìä **–û—Å–Ω–æ–≤–Ω—ã–µ:**
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/threadid - –ü–æ–∫–∞–∑–∞—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–ø–∏–∫–∞

üìã **–õ–æ–≥–∏:**
/log - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
/safe_log - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–∞
/send_log - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ª–æ–≥–∞

‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–µ—Ä
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∏:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /safe_log –µ—Å–ª–∏ /log –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ /restart –æ—á–∏—â–∞–µ—Ç –±–∞–∑—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
‚Ä¢ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º —á–∞—Ç–µ"""

    await update.message.reply_text(help_text, parse_mode="Markdown")

async def start_command(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    start_text = """üöÄ **VintedScanner Bot –∑–∞–ø—É—â–µ–Ω!**

–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä—é Vinted –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã."""
    
    await update.message.reply_text(start_text, parse_mode="Markdown")

# –í–ê–ñ–ù–û: —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ç–æ–ª—å–∫–æ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥—É,
# –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ, –≥–¥–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–µ—â–∞—Ö,
# –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ await asyncio.sleep(1) –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏!

def main():
    application = Application.builder().token(Config.telegram_bot_token).build()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler('start', start_command))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('status', status))
    application.add_handler(CommandHandler('threadid', threadid))
    
    # –ö–æ–º–∞–Ω–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    application.add_handler(CommandHandler('log', log))  
    application.add_handler(CommandHandler('safe_log', safe_log))  
    application.add_handler(CommandHandler('send_log', send_log))  
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    application.add_handler(CommandHandler('restart', restart))
    
    # application.add_handler(CommandHandler('refresh', refresh))  # —É–¥–∞–ª–µ–Ω–æ
    # CommandHandler('delete_old', delete_old) —É–¥–∞–ª–µ–Ω - –∫–æ–º–∞–Ω–¥–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞
    
    application.post_init = notify_start
    application.run_polling()

if __name__ == '__main__':
    main()
